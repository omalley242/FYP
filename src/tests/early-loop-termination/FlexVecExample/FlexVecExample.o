; ModuleID = '../tests/early-loop-termination/FlexVecExample/FlexVecExample.c'
source_filename = "../tests/early-loop-termination/FlexVecExample/FlexVecExample.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "aarch64-none-linux-gnu"

; Function Attrs: nofree norecurse nosync nounwind memory(none) uwtable vscale_range(1,16)
define dso_local i32 @benchmark() local_unnamed_addr #0 {
entry:
  %spiral_srch = alloca [64 x i32], align 4
  %mv = alloca [64 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %spiral_srch) #3
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %mv) #3
  br label %for.body

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds nuw [64 x i32], ptr %spiral_srch, i64 0, i64 %indvars.iv
  %0 = trunc nuw nsw i64 %indvars.iv to i32
  store i32 %0, ptr %arrayidx, align 4, !tbaa !6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond.not, label %for.body4, label %for.body, !llvm.loop !10

for.cond.cleanup3:                                ; preds = %for.body4
  %arrayidx10 = getelementptr inbounds nuw i8, ptr %mv, i64 128
  store i32 -1, ptr %arrayidx10, align 4, !tbaa !6
  %1 = tail call i32 @llvm.vscale.i32()
  %min.iters.check = icmp samesign ugt i32 %1, 15
  br i1 %min.iters.check, label %for.cond11, label %for.body14

for.body4:                                        ; preds = %for.body, %for.body4
  %indvars.iv42 = phi i64 [ %indvars.iv.next43, %for.body4 ], [ 0, %for.body ]
  %arrayidx6 = getelementptr inbounds nuw [64 x i32], ptr %mv, i64 0, i64 %indvars.iv42
  %2 = trunc nuw nsw i64 %indvars.iv42 to i32
  store i32 %2, ptr %arrayidx6, align 4, !tbaa !6
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1
  %exitcond45.not = icmp eq i64 %indvars.iv.next43, 64
  br i1 %exitcond45.not, label %for.cond.cleanup3, label %for.body4, !llvm.loop !13

for.cond11:                                       ; preds = %for.cond.cleanup3, %for.inc20
  %pos.0 = phi i32 [ 0, %for.cond.cleanup3 ], [ %inc21, %for.inc20 ]
  %cmp12 = icmp slt i32 %pos.0, 64
  br i1 %cmp12, label %for.body14, label %cleanup

for.body14:                                       ; preds = %for.cond.cleanup3, %for.cond11
  %pos.1 = phi i32 [ %pos.0, %for.cond11 ], [ 0, %for.cond.cleanup3 ]
  %idxprom15 = sext i32 %pos.1 to i64
  %arrayidx16 = getelementptr inbounds [64 x i32], ptr %spiral_srch, i64 0, i64 %idxprom15
  %3 = load i32, ptr %arrayidx16, align 4, !tbaa !6
  %idxprom17 = sext i32 %3 to i64
  %arrayidx18 = getelementptr inbounds [64 x i32], ptr %mv, i64 0, i64 %idxprom17
  %4 = load i32, ptr %arrayidx18, align 4, !tbaa !6
  %cmp19 = icmp slt i32 %4, 0
  br i1 %cmp19, label %cleanup, label %for.inc20

for.inc20:                                        ; preds = %for.body14
  %inc21 = add nsw i32 %pos.1, 1
  br label %for.cond11, !llvm.loop !14

cleanup:                                          ; preds = %for.body14, %for.cond11
  %best_pos.0 = phi i32 [ undef, %for.cond11 ], [ %pos.1, %for.body14 ]
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %mv) #3
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %spiral_srch) #3
  ret i32 %best_pos.0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare i32 @llvm.vscale.i32() #2

attributes #0 = { nofree norecurse nosync nounwind memory(none) uwtable vscale_range(1,16) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+crc,+fp-armv8,+fullfp16,+lse,+neon,+ras,+rdm,+sve,+v8.1a,+v8.2a,+v8a,-fmv" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 1}
!5 = !{!"clang version 20.0.0git (git@github.com:omalley242/llvm-project-fyp.git ac96c75d7fcf5a8c7e937c22e25d58ca3e4ccd52)"}
!6 = !{!7, !7, i64 0}
!7 = !{!"int", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = distinct !{!10, !11, !12}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !11, !12}
!14 = distinct !{!14, !11, !12}
